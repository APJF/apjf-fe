import api from '../api/axios';
import type { 
  ExamApiResponse, 
  StartExamResponse, 
  SubmitExamResponse,
  SubmitExamAnswer
} from '../types/exam';

export class ExamService {
  /**
   * Test method ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi API
   */
  static async testConnection(): Promise<void> {
    try {
      console.log('üß™ Testing API connection...');
      const response = await api.get('/exams');
      console.log('‚úÖ API connection successful:', response.status);
    } catch (error) {
      console.error('‚ùå API connection failed:', error);
      throw error;
    }
  }

  /**
   * L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ b√†i thi
   */
  static async getExamDetail(examId: string): Promise<ExamApiResponse> {
    try {
      const response = await api.get(`/exams/${examId}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching exam detail:', error);
      throw error;
    }
  }

  /**
   * Debug method - Ki·ªÉm tra user data v√† token
   */
  static debugUserAuth(): void {
    console.log('üîç === DEBUG USER AUTH ===');
    
    // Check user data
    const userJson = localStorage.getItem('user');
    console.log('Raw user JSON:', userJson);
    
    if (userJson) {
      try {
        const user = JSON.parse(userJson);
        console.log('Parsed user:', user);
        console.log('User ID:', user.id);
        console.log('User email:', user.email);
      } catch (e) {
        console.error('Failed to parse user JSON:', e);
      }
    } else {
      console.log('No user data in localStorage');
    }
    
    // Check tokens
    const accessToken = localStorage.getItem('access_token');
    const refreshToken = localStorage.getItem('refresh_token');
    
    console.log('Access token exists:', !!accessToken);
    console.log('Access token preview:', accessToken?.substring(0, 50) + '...');
    console.log('Refresh token exists:', !!refreshToken);
    
    console.log('üîç === END DEBUG ===');
  }

  /**
   * SIMPLE test - ch·ªâ log v√† th·ª≠ nghi·ªám c∆° b·∫£n v·ªõi endpoint ch√≠nh x√°c
   */
  static async simpleStartExam(examId: string): Promise<StartExamResponse> {
    console.log('=== START EXAM ===');
    console.log('ExamId:', examId);
    
    // Get userId from localStorage
    const userJson = localStorage.getItem('user');
    const token = localStorage.getItem('access_token');
    
    console.log('User data:', userJson);
    console.log('Has token:', !!token);
    
    let userId = '2'; // fallback default
    if (userJson) {
      try {
        const user = JSON.parse(userJson);
        userId = user.id || '2';
      } catch (e) {
        console.warn('Failed to parse user data:', e);
      }
    }
    
    console.log('Using userId:', userId);
    
    // Use the correct endpoint from API documentation
    try {
      const url = `/exam-results/exams/${examId}/start?userId=${userId}`;
      console.log('Making POST request to:', url);
      const response = await api.post(url);
      console.log('SUCCESS - Start exam:', response.data);
      return response.data;
    } catch (error) {
      console.error('Start exam failed:', error);
      throw error;
    }
  }

  /**
   * B·∫Øt ƒë·∫ßu l√†m b√†i thi
   */
  static async startExam(examId: string): Promise<StartExamResponse> {
    // G·ªçi simple test tr∆∞·ªõc
    return await this.simpleStartExam(examId);
  }

  /**
   * N·ªôp b√†i thi v·ªõi endpoint ch√≠nh x√°c t·ª´ API docs
   */
  static async debugSubmitExam(examId: string, answers: SubmitExamAnswer[]): Promise<SubmitExamResponse> {
    console.log('üß™ SUBMIT EXAM');
    console.log('ExamId:', examId);
    console.log('Original answers:', answers);
    
    // Get userId from localStorage
    const userJson = localStorage.getItem('user');
    let userId = '2'; // fallback default
    
    if (userJson) {
      try {
        const user = JSON.parse(userJson);
        userId = user.id || '2';
      } catch (e) {
        console.warn('Failed to parse user data:', e);
      }
    }
    
    // Transform answers to server format
    const formattedAnswers = answers.map(answer => ({
      questionId: answer.questionId,
      selectedOptionId: answer.selectedOptionId || null,
      userAnswer: answer.userAnswer || null
    }));
    
    const requestBody = {
      examId: examId,
      answers: formattedAnswers
    };
    
    console.log('Formatted request body:', JSON.stringify(requestBody, null, 2));
    console.log('Using userId:', userId);
    
    // Use the correct endpoint from API documentation
    try {
      const url = `/exam-results/exams/${examId}/submit?userId=${userId}`;
      console.log('Making POST request to:', url);
      const response = await api.post(url, requestBody);
      console.log('‚úÖ SUCCESS:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Submit exam failed:', error);
      throw error;
    }
  }

  /**
   * N·ªôp b√†i thi
   */
  static async submitExam(examId: string, answers: SubmitExamAnswer[]): Promise<SubmitExamResponse> {
    // Temporarily use debug method to find correct endpoint
    return await this.debugSubmitExam(examId, answers);
  }

  /**
   * L·∫•y k·∫øt qu·∫£ b√†i thi theo ID
   * Th·ª≠ c√°c endpoint kh√°c nhau ƒë·ªÉ t√¨m endpoint ƒë√∫ng
   */
  static async getExamResult(resultId: string): Promise<SubmitExamResponse> {
    console.log('üîç Attempting to fetch exam result for ID:', resultId)
    
    // Th·ª≠ endpoint 1: /exam-results/{resultId}
    try {
      console.log('Trying endpoint: /exam-results/' + resultId)
      const response = await api.get(`/exam-results/${resultId}`)
      console.log('‚úÖ Success with /exam-results/{resultId}:', response.data)
      return response.data
    } catch (error) {
      console.log('‚ùå Failed with /exam-results/{resultId}:', error)
    }

    // Th·ª≠ endpoint 2: /exam-results/result/{resultId}
    try {
      console.log('Trying endpoint: /exam-results/result/' + resultId)
      const response = await api.get(`/exam-results/result/${resultId}`)
      console.log('‚úÖ Success with /exam-results/result/{resultId}:', response.data)
      return response.data
    } catch (error) {
      console.log('‚ùå Failed with /exam-results/result/{resultId}:', error)
    }

    // Th·ª≠ endpoint 3: /exam-results/details/{resultId}
    try {
      console.log('Trying endpoint: /exam-results/details/' + resultId)
      const response = await api.get(`/exam-results/details/${resultId}`)
      console.log('‚úÖ Success with /exam-results/details/{resultId}:', response.data)
      return response.data
    } catch (error) {
      console.log('‚ùå Failed with /exam-results/details/{resultId}:', error)
    }

    // N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, n√©m l·ªói
    throw new Error(`Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ b√†i ki·ªÉm tra v·ªõi ID: ${resultId}. Vui l√≤ng ki·ªÉm tra API endpoint.`)
  }
}
